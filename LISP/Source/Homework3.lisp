(format t "~%Problem 1:")
(defun inc(numlist)
    (cond ((null numlist) nil)
        (t (cons (+ 1 (car numlist)) (inc (cdr numlist))))
    )
)
(format t "~%(inc '(5 3 7 0 2 3))                           Returns: ~a" (inc '(5 3 7 0 2 3)))
(format t "~%(inc '(1 2 3))                                 Returns: ~a" (inc '(1 2 3)))
(format t "~%(inc nil)                                      Returns: ~a" (inc nil))



(format t "~%~%Problem 2:")
(defun pairup(l)
    (cond ((null l) nil)
		((null (cdr l)) (list l))
        (t (cons (list (car l) (cadr l)) (pairup (cddr l))))
    )
)
(format t "~%(pairup '(1 2 3 4 5 6))                        Returns: ~a" (pairup '(1 2 3 4 5 6)))
(format t "~%(pairup '(A B C D E))                          Returns: ~a" (pairup '(A B C D E)))
(format t "~%(pairup '((A) B C (D E)))                      Returns: ~a" (pairup '((A) B C (D E))))
(format t "~%(pairup nil)                                   Returns: ~a" (pairup nil))



(format t "~%~%Problem 3:")
(defun parens(l)
    (cond ((null (cdr l)) l)
        (t (list (car l) (parens (cdr l))))
    )
)
(format t "~%(parens '(A B C D E))                          Returns: ~a" (parens '(A B C D E)))
(format t "~%(parens '(A A A))                              Returns: ~a" (parens '(A A A)))
(format t "~%(parens '(X))                                  Returns: ~a" (parens '(X)))
(format t "~%(parens '(1 2 (3 4) 5))                        Returns: ~a" (parens '(1 2 (3 4) 5)))
(format t "~%(parens nil)                                   Returns: ~a" (parens nil))



(format t "~%~%Problem 4:")
(defun mergesort(nlist1 nlist2)
    (cond ((null nlist1) nlist2)
        ((null nlist2) nlist1)
        ((< (car nlist1) (car nlist2)) (cons (car nlist1) (mergesort (cdr nlist1) nlist2)))
        (t (cons (car nlist2) (mergesort nlist1 (cdr nlist2))))
    )
)
(format t "~%(mergesort '(1 1 2 4 7) '(1 2 2 3 4 6 9))      Returns: ~a" (mergesort '(1 1 2 4 7) '(1 2 2 3 4 6 9)))
(format t "~%(mergesort '(2 2 3 5 8) '(1 3 5))              Returns: ~a" (mergesort '(2 2 3 5 8) '(1 3 5)))
(format t "~%(mergesort '(1 2 3) nil)                       Returns: ~a" (mergesort '(1 2 3) nil))



(format t "~%~%Problem 5:")
(defun altmerge(l1 l2)
	(cond ((null l1) l2) 
		((null l2) l1)
		(t (cons (car l1) (altmerge l2 (cdr l1))))
	)
)
(format t "~%(altmerge '(1 2 3) '(X Y Z))                   Returns: ~a" (altmerge '(1 2 3) '(X Y Z)))
(format t "~%(altmerge '(W E A W Q) '(1 7 7 3 2 6))         Returns: ~a" (altmerge '(W E A W Q) '(1 7 7 3 2 6)))
(format t "~%(altmerge '(S D (Q W) Q) '(A (3 2)))           Returns: ~a" (altmerge '(S D (Q W) Q) '(A (3 2))))
(format t "~%(altmerge nil '(A B C D E))                    Returns: ~a" (altmerge nil '(A B C D E)))



(format t "~%~%Problem 6:")
(defun unmerge(l)
    (cond ((null l) '(nil nil))
        (t (append (list (odd l)) (list (even l))))
    )
)
(defun odd(l)
    (cond ((null l) nil)
        (t (cons (car l) (odd (cddr l))))
    )
)
(defun even(l)
    (cond ((null l) nil)
        (t (append (odd (cdr l))))
    )
)
(format t "~%(unmerge '(1 2 3 4 5 6))                       Returns: ~a" (unmerge '(1 2 3 4 5 6)))
(format t "~%(unmerge '(A B C D E))                         Returns: ~a" (unmerge '(A B C D E)))
(format t "~%(unmerge '(X (Y Z) W))                         Returns: ~a" (unmerge '(X (Y Z) W)))
(format t "~%(unmerge '(A))                                 Returns: ~a" (unmerge '(A)))
(format t "~%(unmerge nil)                                  Returns: ~a" (unmerge nil))



(format t "~%~%Problem 7:")
(defun copy(s n)
    (cond ((equal n 0) nil)
        (t (append (list s) (copy s (- n 1))))
    )
)
(format t "~%(copy 'A 7)                                    Returns: ~a" (copy 'A 7))
(format t "~%(copy '(X Y) 3)                                Returns: ~a" (copy '(X Y) 3))
(format t "~%(copy 3 4)                                     Returns: ~a" (copy 3 4))
(format t "~%(copy 'Z 1)                                    Returns: ~a" (copy 'Z 1))
(format t "~%(copy 'X 0)                                    Returns: ~a" (copy 'X 0))
(format t "~%(copy nil 5)                                   Returns: ~a" (copy nil 5))



(format t "~%~%Problem 8:")
(defun replicate(l nlist)
    (cond ((equal (car nlist) 0) (replicate (cdr l) (cdr nlist)))
            ((or (equal (car l) nil) (equal (car nlist) nil)) nil)
            (t (append (list (car l)) (copy (car l) (- (car nlist) 1)) (replicate (cdr l) (cdr nlist))))
    )
)
(format t "~%(replicate '(A B C D E) '(1 0 4 3 2))          Returns: ~a" (replicate '(A B C D E) '(1 0 4 3 2)))
(format t "~%(replicate '(W X Y Z X Q W) '(3 4 0 1))        Returns: ~a" (replicate '(W X Y Z X Q W) '(3 4 0 1)))
(format t "~%(replicate '(1 2 3 1) '(1 2 3 4 5 6))          Returns: ~a" (replicate '(1 2 3 1) '(1 2 3 4 5 6)))
(format t "~%(replicate '(X W X E D R) nil)                 Returns: ~a" (replicate '(X W X E D R) nil))
(format t "~%(replicate nil '(1 0 0 3 2))                   Returns: ~a" (replicate nil '(1 0 0 3 2)))