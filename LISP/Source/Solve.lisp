(defun solve(l)
    (cond ((equal (car l) '=) (cadr l))
        ((equal (car l) '+) (- (solve (cddr l)) (cadr l)))
        ((equal (car l) '-) (+ (solve (cddr l)) (cadr l)))
        ((equal (car l) '*) (/ (solve (cddr l)) (cadr l)))
        ((equal (car l) '/) (* (solve (cddr l)) (cadr l)))
        (t (format t "~%Invalid string") 0)
    )
)
(setf A (solve '(* 10 / 2 + 2 / 3 + 3 / 2 = 6)))
(print A)
(setf B (solve '(* 10 - 2 * 2 / 3 - 3 + 2 = 6)))
(print B)
(setf C (solve '(* 10 0 2 + 2 / 3 + 3 / 2 = 6)))
(print C)
(setf D (solve '(* 10 / 2 - 2 + 3 + 3 + 2 = 15)))
(print D)